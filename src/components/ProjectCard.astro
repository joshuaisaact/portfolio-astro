---
import type { Project } from "./Projects.astro";
import { Image, getImage } from "astro:assets";
import { Github, Trophy } from "lucide-astro";

interface Props {
  project: Project;
  variant?: "full" | "minimal";
}

const { project, variant = "full" } = Astro.props;

const isMinimal = variant === "minimal";
const githubLink = project.links.find((link) => link.type === "github");

const cardLinkHref =
  isMinimal && githubLink ? githubLink.url : `/projects/${project.slug}`;
const linkTarget = isMinimal && githubLink ? "_blank" : "_self";

const getPosterUrl = async (
  poster: ImageMetadata | undefined,
): Promise<string | undefined> => {
  if (!poster) return undefined;
  const optimizedImage = await getImage({
    src: poster,
    width: 560,
    format: "webp",
  });
  return optimizedImage.src;
};

const posterUrl = project.videoSrc
  ? await getPosterUrl(project.posterImage || project.imageSrc)
  : undefined;
---

<div class="relative block h-full">
  {
    project.award && !isMinimal && (
      <div
        class="absolute -top-2 -right-2 sm:-top-3 sm:-right-3 z-20
          bg-amber-500 text-white rounded-full p-1.5 sm:p-2 shadow-md
          transform transition-transform group-hover:scale-110"
      >
        <Trophy class="w-4 h-4 sm:w-5 sm:h-5" />
      </div>
    )
  }

  <a
    href={cardLinkHref}
    target={linkTarget}
    rel={linkTarget === "_blank" ? "noopener noreferrer" : undefined}
    class={`block h-full group
        relative overflow-hidden
        bg-linear-to-b from-white to-gray-50
        dark:from-gray-800 dark:to-gray-850
        rounded-lg shadow-sm
        ring-1 ring-gray-900/5
        transition-all duration-300
        hover:shadow-md hover:-translate-y-0.5 ${isMinimal ? "hover:bg-gray-50 dark:hover:bg-gray-800/60" : ""}`}
  >
    {
      !isMinimal && (project.videoPreviewSrc || project.imageSrc) && (
        <div class="relative aspect-3/2 sm:aspect-4/3 overflow-hidden bg-gray-100 dark:bg-gray-800">
          {project.videoSrc && (
            <video
              data-video-src={project.videoPreviewSrc || project.videoSrc}
              data-video-src-mp4={project.videoSrc}
              autoplay
              loop
              muted
              playsinline
              preload="none"
              poster={posterUrl}
              class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105 lazy-video"
            />
          )}
          {!project.videoSrc && project.imageSrc && (
            <Image
              src={project.imageSrc}
              alt={project.imageAlt || project.title}
              widths={[320, 560, 800]}
              sizes="(max-width: 640px) 320px, (max-width: 1024px) 560px, 800px"
              loading="lazy"
              class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
            />
          )}
        </div>
      )
    }

    <div
      class={`p-4 sm:p-6 space-y-3 sm:space-y-4 ${isMinimal ? "sm:py-5 sm:px-5" : ""}`}
    >
      <div
        class={`flex ${isMinimal ? "flex-col items-start sm:flex-row sm:items-center sm:justify-between" : "flex-col sm:flex-row sm:items-center"} gap-2`}
      >
        <h3
          class={`text-lg sm:text-xl font-semibold text-gray-900 dark:text-gray-100 ${isMinimal ? "line-clamp-2" : "line-clamp-1"}`}
        >
          {project.title}
        </h3>
        {
          project.award && isMinimal && (
            <span class="text-xs text-amber-600 dark:text-amber-400 mt-1 sm:mt-0">
              (Hackathon Winner)
            </span>
          )
        }
        {
          project.award && !isMinimal && (
            <div
              class="flex items-center gap-1.5 px-2 py-0.5
                    bg-amber-100 dark:bg-amber-500/20 rounded-full w-fit"
            >
              <Trophy class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-amber-700 dark:text-amber-400" />
              <span class="text-xs sm:text-sm font-medium text-amber-700 dark:text-amber-400">
                Hackathon Winner
              </span>
            </div>
          )
        }
        {
          isMinimal && githubLink && (
            <Github class="w-5 h-5 text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-200 transition-colors sm:ml-auto" />
          )
        }
      </div>

      <ul class="flex flex-wrap gap-x-3 gap-y-2 sm:gap-x-4">
        {
          project.skills.slice(0, isMinimal ? 4 : 3).map((skill) => (
            <li class="flex items-center" title={skill}>
              <img
                src={`/media/skills/${skill.toLowerCase().replace(/\s+/g, "-")}.svg`}
                alt=""
                width={isMinimal ? 20 : 24}
                height={isMinimal ? 20 : 24}
                loading="lazy"
                class={`w-4 h-4 sm:w-5 sm:h-5 ${isMinimal ? "opacity-60" : "opacity-75 group-hover:opacity-100"} dark:invert-[.15] transition-opacity`}
                aria-hidden="true"
              />
              {isMinimal && (
                <span class="ml-1.5 text-xs text-gray-500 dark:text-gray-400 hidden sm:inline">
                  {skill}
                </span>
              )}
            </li>
          ))
        }
      </ul>

      <p
        class={`text-sm ${isMinimal ? "text-gray-500 dark:text-gray-400 line-clamp-2 sm:line-clamp-3" : "text-gray-600 dark:text-gray-300 line-clamp-3"}`}
      >
        {project.description}
      </p>
    </div>
  </a>
</div>

<script>
  const lazyVideos = document.querySelectorAll("video.lazy-video");

  if ("IntersectionObserver" in window) {
    const videoObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const video = entry.target as HTMLVideoElement;
          const webmSrc = video.dataset.videoSrc;
          const mp4Src = video.dataset.videoSrcMp4;

          if (webmSrc && !video.querySelector("source")) {
            // Add WebM source (better compression)
            const sourceWebm = document.createElement("source");
            sourceWebm.src = webmSrc;
            sourceWebm.type = "video/webm";
            video.appendChild(sourceWebm);

            // Add MP4 source (fallback)
            if (mp4Src) {
              const sourceMp4 = document.createElement("source");
              sourceMp4.src = mp4Src;
              sourceMp4.type = "video/mp4";
              video.appendChild(sourceMp4);
            }

            video.load();
            video.play().catch(() => {
              // Autoplay failed (e.g., browser policy), that's ok
            });
          }

          videoObserver.unobserve(video);
        }
      });
    });

    lazyVideos.forEach((video) => {
      videoObserver.observe(video);
    });
  } else {
    // Fallback for browsers without IntersectionObserver
    lazyVideos.forEach((video) => {
      const videoEl = video as HTMLVideoElement;
      const webmSrc = videoEl.dataset.videoSrc;
      const mp4Src = videoEl.dataset.videoSrcMp4;

      if (webmSrc) {
        const sourceWebm = document.createElement("source");
        sourceWebm.src = webmSrc;
        sourceWebm.type = "video/webm";
        videoEl.appendChild(sourceWebm);

        if (mp4Src) {
          const sourceMp4 = document.createElement("source");
          sourceMp4.src = mp4Src;
          sourceMp4.type = "video/mp4";
          videoEl.appendChild(sourceMp4);
        }

        videoEl.load();
      }
    });
  }
</script>
