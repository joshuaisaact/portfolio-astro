---
import { getCollection, render } from "astro:content";
import { Image } from "astro:assets";
import { ArrowLeft } from "lucide-astro";
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);

const formattedDate = new Date(post.data.date).toLocaleDateString("en-GB", {
  year: "numeric",
  month: "long",
  day: "numeric",
});

const pageTitle = `${post.data.title} | Josh Tuddenham`;
const canonicalURL = `https://joshtuddenham.dev/blog/${post.id}`;
---

<Layout
  title={pageTitle}
  description={post.data.excerpt}
  canonicalURL={canonicalURL}
>
  <Navbar />
  <div class="pb-16">
    <article class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 pt-12">
      <!-- Blog Header -->
      <div class="mb-8">
        <nav aria-label="Back to blog navigation">
          <a
            href="/#blog"
            aria-label="Back to blog posts"
            class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 mb-6 group"
          >
            <ArrowLeft
              class="w-4 h-4 mr-2 transition-transform group-hover:-translate-x-1"
              aria-hidden="true"
            />
            Back to blog
          </a>
        </nav>

        <h1 class="text-4xl font-bold mb-4 dark:text-gray-200 tracking-tight">
          {post.data.title}
        </h1>

        <div class="flex items-center gap-4 mb-6">
          <time
            datetime={new Date(post.data.date).toISOString()}
            class="text-sm text-gray-500 dark:text-gray-400"
            aria-label={`Published on ${formattedDate}`}
          >
            {formattedDate}
          </time>
          {
            post.data.tags && post.data.tags.length > 0 && (
              <div
                class="flex flex-wrap gap-1.5 sm:gap-2"
                role="list"
                aria-label="Article tags"
              >
                {post.data.tags.map((tag) => (
                  <span
                    role="listitem"
                    class="inline-flex items-center px-2 sm:px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            )
          }
        </div>

        {
          (post.data.featured_image || post.data.featured_video) && (
            <div
              class:list={[
                "relative overflow-hidden rounded-lg mb-8",
                post.data.featured_video
                  ? "aspect-square bg-black flex items-center justify-center"
                  : "aspect-video",
              ]}
              aria-hidden="true"
            >
              {post.data.featured_video ? (
                <video
                  src={post.data.featured_video}
                  autoplay
                  loop
                  muted
                  playsinline
                  class="max-w-full max-h-full object-contain"
                  aria-label={`Video for ${post.data.title}`}
                />
              ) : post.data.featured_image ? (
                <Image
                  src={post.data.featured_image}
                  alt={post.data.title}
                  width={1200}
                  height={675}
                  class="w-full h-full object-contain"
                  loading="eager"
                />
              ) : null}
            </div>
          )
        }
      </div>

      <!-- Blog Content -->
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>
    </article>
  </div>
</Layout>

<script>
  const COPY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`;
  const CHECK_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 6 9 17l-5-5"/></svg>`;

  function addCopyButtons() {
    const codeBlocks = document.querySelectorAll(".prose pre");

    codeBlocks.forEach((pre) => {
      if (!pre.parentElement?.classList.contains("code-block-wrapper")) {
        const wrapper = document.createElement("div");
        wrapper.className = "code-block-wrapper";
        pre.parentNode?.insertBefore(wrapper, pre);
        wrapper.appendChild(pre);
      }

      const button = document.createElement("button");
      button.className = "copy-button cursor-pointer";
      button.setAttribute("aria-label", "Copy code to clipboard");
      button.innerHTML = COPY_ICON;

      button.addEventListener("click", async () => {
        const code = pre.textContent || "";
        await navigator.clipboard.writeText(code);

        button.innerHTML = CHECK_ICON;
        button.classList.add("copied");

        setTimeout(() => {
          button.innerHTML = COPY_ICON;
          button.classList.remove("copied");
        }, 2000);
      });

      pre.parentElement?.appendChild(button);
    });
  }

  addCopyButtons();
  document.addEventListener("astro:page-load", addCopyButtons);
</script>
